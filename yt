#! /usr/bin/env ruby

=begin

Download videos from various video hosting sites (for complete list see
`youtube-dl --list-extractors`). If more then one argument is provided
multiple jobs are run to download videos in parallel.

Shells out to youtube-dl(1), moreutils_parallel(1) from 'moreutils' package
(http://joeyh.name/code/moreutils/) is used for spawning multiple jobs when
needed.

Created: 24 Apr 2013
Author: Victor Deryagin <vderyagin@gmail.com>

=end

require 'optparse'

FILENAME_FORMAT = '%(title)s (%(upload_date)s).%(ext)s'

def destination(dir)
  File.join(dir, FILENAME_FORMAT)
end

options = {
  jobs: 5,
  out_dir: ENV['VIDEO_DOWNLOAD_DIR'] || File.expand_path('.'),
}

parser = OptionParser.new do |opts|
  name = File.basename($PROGRAM_NAME)

  opts.banner =  "Usage:\t#{name} [options] URL..."

  opts.on('-j JOBS', '--jobs JOBS', Integer,
          "Number of separate jobs to run, default is #{options[:jobs]}"
          ) do |jobs|
    options[:jobs] = jobs
  end

  opts.on('-D DIR', '--output-directory DIR',
          "directory to store files in, default is #{options[:out_dir]}"
          ) do |dir|
    options[:out_dir] = dir.tap do |d|
      abort "ERROR: '#{d}' is not a valid directory" unless d.directory?
    end
  end

  opts.on('-t', '--test', 'Run tests') do
    require 'minitest/autorun'
  end

  opts.on '-h', '--help', 'Display this message' do
    puts opts
    exit
  end
end

def youtube?(url)
  url =~ %r(\Ahttps?://(w{3}\.)?(m.)?youtu(\.be|be\.com)/)
end

def youtube_playlist?(url)
  youtube?(url) && url =~ /[&\?]list=.+/
end

def youtube_single_video?(url)
  youtube?(url) && url =~ /\/watch\?v=.+/
end

# if both video and playlist are specified, youtube-dl(1) tries to download
# whole playlist from the beginning, this is the fix:
def clean(url)
  url = url.dup

  if youtube_single_video?(url) && youtube_playlist?(url)
    url[/&list=[a-z0-9_]+/i] = ''
  end

  url
end

if __FILE__ == $PROGRAM_NAME
  ARGV << '--help' if ARGV.empty?
  parser.parse!

  if defined? MiniTest
    describe 'youtube?' do
      it 'matches youtube.com urls' do
        must_be :youtube?, 'https://youtube.com/flsdkjf'
      end

      it 'matches m.youtube.com urls' do
        must_be :youtube?, 'https://m.youtube.com/flsdkjf'
      end

      it 'matches youtu.be urls' do
        must_be :youtube?, 'http://youtu.be/flsdkjf'
      end

      it 'rejects non-youtube urls' do
        wont_be :youtube?, 'https://vimeo.com/'
      end
    end

    describe 'youtube_playlist?' do
      it 'matches urls to youtube playlists' do
        [
          'http://www.youtube.com/playlist?list=lst',
          'http://www.youtube.com/watch?v=foo&list=bar',
        ].each do |url|
          must_be :youtube_playlist?, url
        end
      end

      it 'rejects urls without playlist specified' do
        url = 'http://www.youtube.com/watch?v=dQw4w9WgXcQ'
        wont_be :youtube_playlist?, url
      end
    end

    describe 'youtube_single_video?' do
      it 'matches url to single video' do
        url = 'http://www.youtube.com/watch?v=dQw4w9WgXcQ'
        must_be :youtube_single_video?, url
      end

      it 'rejects other stuff' do
        url = 'http://www.youtube.com/playlist?list=lst'
        wont_be :youtube_single_video?, url
      end
    end

    describe 'clean' do
      it 'cleans up playlist is specified in single-video url' do
        url = 'http://www.youtube.com/watch?v=SomeVid&list=UU1_jYjQ&index=2'
        clean(url).must_equal 'http://www.youtube.com/watch?v=SomeVid&index=2'
      end

      it 'does not mess with playlist-only urls' do
        url = 'http://www.youtube.com/playlist?list=UU1yBKRZjYjQ'
        clean(url).must_equal url
      end

      it 'does not mess with single-video urls' do
        url = 'http://www.youtube.com/watch?v=dQw4w9WgXcQ'
        clean(url).must_equal url
      end
    end

    exit
  end

  if ARGV.empty?
    warn 'no URLs to download'
    exit 1
  end

  cmd = [
    'youtube-dl',
    '--output',
    destination(options[:out_dir]),
  ]

  if ARGV.size > 1
    cmd = [
      'moreutils_parallel',
      '-j',
      options[:jobs].to_s,
      *cmd,
      '--newline',
      '--',
    ]
  end

  begin
    system(*cmd, *ARGV.map(&method(:clean)))
  rescue Interrupt
    exit 1
  end
end
