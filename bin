#! /usr/bin/env ruby

require 'English'
require 'fileutils'
require 'net/http'
require 'open-uri'
require 'thor'
require 'tmpdir'
require 'uri'
require 'yaml'

=begin

Shells out to:

  file(1)
  gcc(1)
  git(1)
  go(1)
  make(1)
  strip(1)
  tar(1)
  unzip(1)
  wget(1)
  which(1)

=end

BIN_DIR = __dir__
LIB_DIR = File.expand_path('lib', BIN_DIR)

SRC = YAML.load_file(File.expand_path('sources.yml', BIN_DIR))

module Helpers
  def replace_executable(file, content)
    FileUtils.rm_f file
    File.write file, content
    File.chmod 0744, file
  end

  def place_binary(name)
    binary = location_of(name)
    FileUtils.rm_f binary
    FileUtils.cp name, binary
    File.chmod 0744, binary
  end

  def executable?(file)
    stat = File.stat(file)
    stat.file? && stat.executable?
  end

  def symlink_executable(from, to)
    IO.popen ['which', from] do |io|
      source = io.read.chomp
      io.close

      if $CHILD_STATUS.success?
        target = location_of(to)
        FileUtils.ln_sf source, target
      else
        say "no #{from} executable found", :red
      end
    end
  end

  def location_of(executable)
    File.expand_path(File.basename(executable.to_s), BIN_DIR)
  end

  def strip_binaries
    Dir[location_of('*')]
      .select(&method(:unstripped_binary?))
      .each(&method(:strip))
  end

  def strip(file)
    say "stripping binary file #{file}"
    system 'strip', file
  end

  def unstripped_binary?(file)
    IO.popen(['file', file]).read[/, not stripped$/]
  end

  def download_file(uri, target)
    in_temporary_directory do
      system 'wget', String(uri), '-O', target
      yield target
    end
  end

  def in_github_repo(repo, &block)
    in_git_repo "https://github.com/#{repo}.git", &block
  end

  def in_git_repo(uri, &block)
    repo_dir =  uri[%r{(?<=/)[^/]+\z}].chomp('.git') || 'git_repo'

    in_temporary_directory do
      system 'git', 'clone', uri, repo_dir
      Dir.chdir repo_dir, &block
    end
  end

  def in_temporary_directory(&block)
    Dir.mktmpdir do |tmpdir|
      Dir.chdir tmpdir, &block
    end
  end

  def ensure_directory_exists(dir)
    Dir.mkdir dir unless File.directory?(dir)
  end

  def git_clone_or_pull(repo, dir, &block)
    if File.directory?(dir)
      Dir.chdir dir do
        system 'git', 'pull'
      end
    else
      system 'git', 'clone', repo, dir
    end

    Dir.chdir dir, &block
  end
end

class Bin < Thor
  desc 'init', 'Output zsh code for initialization of needed env variables'
  def init
    print <<-EOS
path=(
  "#{BIN_DIR}"
  "#{BIN_DIR}/lib/copy/x86_64"
  "#{BIN_DIR}/lib/dart-sdk/bin"
  "#{BIN_DIR}/lib/google-cloud-sdk/bin"
  "#{BIN_DIR}/lib/heroku-client/bin"
  "#{BIN_DIR}/lib/odeskteam-3.2.13-1-x86_64/usr/bin"
  $path
)

fpath=(
  "#{BIN_DIR}/lib/zsh-completions/src"
  $fpath
)

source "#{BIN_DIR}/lib/google-cloud-sdk/completion.zsh.inc"

declare -U path
declare -U fpath
     EOS
  end

  desc 'all', 'Do everyting'
  def all
    (self.class.instance_methods(false) - %i(init all)).each do |task|
      public_send task
    end

    strip_binaries
  end

  desc 'git_wip', 'Download and install git-wip script (https://github.com/bartman/git-wip)'
  def git_wip
    replace_executable location_of('git-wip'), open(SRC['git-wip']).read
  end

  desc 'hub', 'Download and install hub script (http://hub.github.com)'
  def hub
    replace_executable location_of('hub'), open(SRC['hub']).read
  end

  desc 'lein', 'Download and install lein (http://leiningen.org)'
  def lein
    replace_executable location_of('lein'), open(SRC['lein']).read
  end

  desc 'sbt', 'Get jar needed to run sbt (http://www.scala-sbt.org)'
  def sbt
    ensure_directory_exists LIB_DIR

    download_file SRC['sbt'], 'sbt-launch.jar' do |jar|
      FileUtils.rm_f File.expand_path(File.basename(jar), LIB_DIR)
      FileUtils.cp jar, LIB_DIR
    end
  end

  desc 'odeskteam', 'Install "oDesk Team" application (https://www.odesk.com/downloads)'
  def odeskteam
    ensure_directory_exists LIB_DIR

    FileUtils.rm_rf File.expand_path('odeskteam-3.2.13-1-x86_64', LIB_DIR)

    download_file SRC['odeskteam'], 'odeskteam.zip' do |archive|
      system 'unzip', archive, '-d', LIB_DIR
    end
  end

  desc 'k2pdfopt', 'Install k2pdfopt (http://www.willus.com/k2pdfopt/)'
  def k2pdfopt
    download_file SRC['k2pdfopt'], 'k2pdfopt' do |binary|
      place_binary binary
    end
  end

  desc 'dart', 'Install Dart SDK (http://www.dartlang.org/tools/sdk)'
  def dart
    ensure_directory_exists LIB_DIR

    FileUtils.rm_rf File.expand_path('dart-sdk', LIB_DIR)

    download_file SRC['dart'], 'dart-sdk.zip' do |archive|
      system 'unzip', archive, '-d', LIB_DIR
    end
  end

  desc 'copy', 'Install Copy{Agent,Console,Cmd} tools (http://copy.com)'
  def copy
    ensure_directory_exists LIB_DIR

    FileUtils.rm_rf File.expand_path('copy', LIB_DIR)

    download_file SRC['copy'], 'copy.tgz' do |archive|
      system 'tar', '--extract', '--gzip', '--file', archive, '--directory', LIB_DIR
    end
  end

  desc 'emxkb', 'Build emxkb from source'
  def emxkb
    FileUtils.rm_f location_of('emxkb')

    Dir.chdir BIN_DIR do
      system 'gcc', '-L/usr/X11R6/lib', '-lX11', '-o', 'emxkb', 'src/emxkb.c'
    end
  end

  desc 'skb', 'Download skb source and build it (https://github.com/polachok/skb)'
  def skb
    in_github_repo 'polachok/skb' do
      system 'make', 'skb'
      place_binary 'skb'
    end
  end

  desc 'dzen2', 'Download dzen2 source and build it (https://github.com/robm/dzen)'
  def dzen2
    in_github_repo 'robm/dzen' do
      system 'make'
      place_binary 'dzen2'
    end
  end

  desc 'hsmarkdown', 'Make symlink pandoc -> hsmarkdown'
  def hsmarkdown
    symlink_executable 'pandoc', 'hsmarkdown'
  end

  desc 'unrar_free', 'Make symlink unrar-gpl -> unrar-free'
  def unrar_free
    symlink_executable 'unrar-gpl', 'unrar-free'
  end

  desc 'exercism', 'Download exercism executable (http://exercism.io)'
  def exercism
    download_file SRC['exercism'], 'exercism.tgz' do |archive|
      system 'tar', '--extract', '--gzip', '--file', archive, '--directory', BIN_DIR
    end
  end

  desc 'rockbox', 'Download and install Rockbox Utility (http://www.rockbox.org/wiki/RockboxUtility)'
  def rockbox
    download_file SRC['rockbox'], 'rockbox.tar.bz2' do |archive|
      FileUtils.rm_f location_of('RockboxUtility')
      system 'tar', '--extract', '--bzip2', '--file', archive
      place_binary Dir['*/RockboxUtility'].first
    end
  end

  desc 'camlistore', 'Download and install camlistore (http://camlistore.org)'
  def camlistore
    in_git_repo SRC['camlistore'] do
      system 'go', 'run', 'make.go'

      Dir['bin/*']
        .select(&method(:executable?))
        .each(&method(:place_binary))
    end
  end

  desc 'gcloud', 'Download and install Google Cloud SDK (https://developers.google.com/cloud/sdk)'
  def gcloud
    ensure_directory_exists LIB_DIR

    FileUtils.rm_rf File.expand_path('google-cloud-sdk', LIB_DIR)

    download_file SRC['gcloud'], 'google-cloud-sdk.zip' do |archive|
      system 'unzip', archive, '-d', LIB_DIR
    end

    install_cmd = [].tap do |cmd|
      cmd << File.expand_path('google-cloud-sdk/install.sh', LIB_DIR)
      cmd << '--usage-reporting' << 'true'
      cmd << '--rc-path' << '/dev/null'
      cmd << '--bash-completion' << 'false'
      cmd << '--path-update' << 'false'
      cmd << '--disable-installation-options'
    end

    system(*install_cmd)
  end

  desc 'heroku', 'Download and install Heroku client (https://github.com/heroku/heroku)'
  def heroku
    ensure_directory_exists LIB_DIR

    FileUtils.rm_rf File.expand_path('heroku-client', LIB_DIR)

    download_file SRC['heroku'], 'heroku-client.tgz' do |archive|
      system 'tar', '--extract', '--gzip', '--file', archive, '--directory', LIB_DIR
    end
  end

  desc 'zsh_completions', 'Clone zsh-completions repository (https://github.com/zsh-users/zsh-completions)'
  def zsh_completions
    ensure_directory_exists LIB_DIR
    dir = File.expand_path('zsh-completions', LIB_DIR)
    git_clone_or_pull SRC['zsh-completions'], dir
  end

  desc 'wrk', 'Install wrk HTTP benchmarking tool (https://github.com/wg/wrk)'
  def wrk
    in_github_repo 'wg/wrk' do
      system 'make'
      place_binary 'wrk'
    end
  end

  desc 'ngrok', 'Install ngrok (http://ngrok.com)'
  def ngrok
    download_file SRC['ngrok'], 'ngrok.zip' do |archive|
      FileUtils.rm_f location_of('ngrok')
      system 'unzip', archive, '-d', BIN_DIR
    end
  end

  desc 'cv', 'Build and install cv - coreutils viewer  (https://github.com/Xfennec/cv)'
  def cv
    in_github_repo 'Xfennec/cv' do
      system 'make'
      place_binary 'cv'
    end
  end

  desc 'xiki', 'Install xiki (http://xiki.org)'
  def xiki
    ensure_directory_exists LIB_DIR

    git_clone_or_pull SRC['xiki'], File.expand_path('xiki', LIB_DIR) do
      FileUtils.rm_f location_of('xiki')
      system 'bundle'
      system 'ruby', 'etc/command/copy_xiki_command_to.rb', location_of('xiki')
    end
  end

  desc 'fig', 'Install fig (http://fig.sh)'
  def fig
    download_file SRC['fig'], 'fig' do |binary|
      place_binary binary
    end
  end

  desc 'jq', 'Install jq (http://stedolan.github.io/jq)'
  def jq
    download_file SRC['jq'], 'jq' do |binary|
      place_binary binary
    end
  end

  desc 'chrome_launcher', 'install host for chrome_launcher chrome extension'
  def chrome_launcher
    FileUtils.rm_f location_of('chrome_launcher')

    Dir.chdir File.expand_path('src/chrome_launcher', BIN_DIR) do
      system 'go', 'build'
      place_binary 'chrome_launcher'
    end

    host_manifest = File.expand_path('src/chrome_launcher/chrome_launcher.json', BIN_DIR)

    %w(chromium google-chrome google-chrome-unstable).map { |chrome_conf_dir|
      File.expand_path("#{chrome_conf_dir}/NativeMessagingHosts", '~/.config/')
    }.each do |msg_hosts_dir|
      FileUtils.mkdir_p msg_hosts_dir
      FileUtils.ln_sf host_manifest, msg_hosts_dir
    end
  end

  no_commands do
    include Helpers
  end
end

Bin.start ARGV
