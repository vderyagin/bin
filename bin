#! /usr/bin/env ruby

require 'English'
require 'fileutils'
require 'net/http'
require 'open-uri'
require 'thor'
require 'tmpdir'
require 'uri'

=begin

Shells out to:

  file(1)
  gcc(1)
  git(1)
  go(1)
  make(1)
  strip(1)
  tar(1)
  unzip(1)
  wget(1)
  which(1)

=end

BIN_DIR = __dir__
LIB_DIR = File.expand_path('lib', BIN_DIR)

SBT_VERSION = '0.13.2'
EXERCISM_VERSION = '1.5.1'
ROCKBOX_UTILITY_VERSION = '1.4.0'

SBT_LAUNCH_URI =
  "http://repo.typesafe.com/typesafe/ivy-releases/org.scala-sbt/sbt-launch/#{SBT_VERSION}/sbt-launch.jar"

# v3.2.13-1-x86_64
ODESK_TEAM_URI =
  'https://docs.google.com/uc?export=download&id=0B1NdDtEdfiQpTkRrOFREdTdNcnc'

# v2.15 (March 22, 2014)
K2PDFOPT_URI =
  'https://docs.google.com/uc?export=download&id=0B1NdDtEdfiQpbTZmQW1hU1NrR3c'

DART_SDK_URI =
  'https://storage.googleapis.com/dart-archive/channels/stable/release/latest/sdk/dartsdk-linux-x64-release.zip'

COPY_URI = 'https://copy.com/install/linux/Copy.tgz'

EXERCISM_URI =
  "https://github.com/exercism/cli/releases/download/v#{EXERCISM_VERSION}/exercism-linux-amd64.tgz"

ROCKBOX_UTILITY_URI =
  "http://download.rockbox.org/rbutil/linux/RockboxUtility-v#{ROCKBOX_UTILITY_VERSION}-64bit.tar.bz2"

CAMLISTORE_REPO_URI = 'https://camlistore.googlesource.com/camlistore'

GOOGLE_CLOUD_SDK_URI =
  'https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.zip'

HEROKU_CLIENT_URI =
  'http://assets.heroku.com/heroku-client/heroku-client.tgz'

ZSH_COMPLETIONS_URI = 'git://github.com/zsh-users/zsh-completions.git'

SCRIPTS = {
  'git-wip' => 'https://raw.github.com/bartman/git-wip/master/git-wip',
  'hub'     => 'http://hub.github.com/standalone',
  'lein'    => 'https://raw.github.com/technomancy/leiningen/stable/bin/lein',
}

module Helpers
  def url_content(url)
    content = open(url).read
  rescue StandardError => err
    say "failed: #{err.message}"
  else
    say 'done'
    content
  end

  def replace_executable(file, content)
    FileUtils.rm_f file
    File.write file, content
    File.chmod 0744, file
  end

  def place_binary(name)
    binary = location_of(name)
    FileUtils.rm_f binary
    FileUtils.cp name, binary
  end

  def executable?(file)
    stat = File.stat(file)
    stat.file? && stat.executable?
  end

  def symlink_executable(from, to)
    IO.popen ['which', from] do |io|
      source = io.read.chomp
      io.close

      if $CHILD_STATUS.success?
        target = location_of(to)
        FileUtils.ln_sf source, target
      else
        say "no #{from} executable found", :red
      end
    end
  end

  def location_of(executable)
    File.expand_path(File.basename(executable.to_s), BIN_DIR)
  end

  def strip_binaries
    Dir[location_of('*')]
      .select(&method(:unstripped_binary?))
      .each(&method(:strip))
  end

  def strip(file)
    say "stripping binary file #{file}"
    system 'strip', file
  end

  def unstripped_binary?(file)
    IO.popen(['file', file]).read[/, not stripped$/]
  end

  def download_file(uri, target)
    in_temporary_directory do
      system 'wget', String(uri), '-O', target
      yield target
    end
  end

  def in_github_repo(repo, &block)
    in_git_repo "https://github.com/#{repo}.git", &block
  end

  def in_git_repo(uri, &block)
    repo_dir =  uri[%r{(?<=/)[^/]+(?=(\.git)?\z)}] || 'git_repo'

    in_temporary_directory do
      system 'git', 'clone', uri, repo_dir
      Dir.chdir repo_dir, &block
    end
  end

  def in_temporary_directory(&block)
    Dir.mktmpdir do |tmpdir|
      Dir.chdir tmpdir, &block
    end
  end

  def ensure_directory_exists(dir)
    Dir.mkdir dir unless File.directory?(dir)
  end
end

class Bin < Thor
  desc 'init', 'output zsh code for initialization of needed env variables'
  def init
    print <<-EOS
path=(
  "#{BIN_DIR}"
  "#{BIN_DIR}/lib/copy/x86_64"
  "#{BIN_DIR}/lib/dart-sdk/bin"
  "#{BIN_DIR}/lib/google-cloud-sdk/bin"
  "#{BIN_DIR}/lib/heroku-client/bin"
  "#{BIN_DIR}/lib/odeskteam-3.2.13-1-x86_64/usr/bin"
  $path
)

fpath=(
  "#{BIN_DIR}/lib/zsh-completions/src"
  $fpath
)

source "#{BIN_DIR}/lib/google-cloud-sdk/completion.zsh.inc"

declare -U path
declare -U fpath
     EOS
  end

  desc 'all', 'do everyting'
  def all
    scripts
    sbt
    odeskteam
    k2pdfopt
    dart
    copy
    emxkb
    skb
    dzen2
    hsmarkdown
    unrar_free
    exercism
    rockbox
    camlistore
    gcloud
    heroku
    zsh_completions

    strip_binaries
  end

  desc 'scripts', 'update all scripts'
  def scripts
    SCRIPTS.each do |script, location|
      file = location_of(script)
      say "updating #{script}... "
      content = url_content(location)
      replace_executable(file, content) if content
    end
  end

  desc 'sbt', 'get jar needed to run sbt (http://www.scala-sbt.org)'
  def sbt
    ensure_directory_exists LIB_DIR

    download_file SBT_LAUNCH_URI, 'sbt-launch.jar' do |jar|
      FileUtils.rm_f File.expand_path(File.basename(jar), LIB_DIR)
      FileUtils.cp jar, LIB_DIR
    end
  end

  desc 'odeskteam', 'install "oDesk Team" application (https://www.odesk.com/downloads)'
  def odeskteam
    ensure_directory_exists LIB_DIR

    FileUtils.rm_rf File.expand_path('odeskteam-3.2.13-1-x86_64', LIB_DIR)

    download_file ODESK_TEAM_URI, 'odeskteam.zip' do |archive|
      system 'unzip', archive, '-d', LIB_DIR
    end
  end

  desc 'k2pdfopt', 'install k2pdfopt (http://www.willus.com/k2pdfopt/)'
  def k2pdfopt
    download_file K2PDFOPT_URI, 'k2pdfopt' do |binary|
      File.chmod 0744, binary
      FileUtils.cp binary, BIN_DIR
    end
  end

  desc 'dart', 'install Dart SDK (http://www.dartlang.org/tools/sdk)'
  def dart
    ensure_directory_exists LIB_DIR

    FileUtils.rm_rf File.expand_path('dart-sdk', LIB_DIR)

    download_file DART_SDK_URI, 'dart-sdk.zip' do |archive|
      system 'unzip', archive, '-d', LIB_DIR
    end
  end

  desc 'copy', 'install Copy{Agent,Console,Cmd} tools (http://copy.com)'
  def copy
    ensure_directory_exists LIB_DIR

    FileUtils.rm_rf File.expand_path('copy', LIB_DIR)

    download_file COPY_URI, 'copy.tgz' do |archive|
      system 'tar', '--extract', '--gzip', '--file', archive, '--directory', LIB_DIR
    end
  end

  desc 'emxkb', 'build emxkb from source'
  def emxkb
    FileUtils.rm_f location_of('emxkb')

    Dir.chdir BIN_DIR do
      system 'gcc', '-L/usr/X11R6/lib', '-lX11', '-o', 'emxkb', 'src/emxkb.c'
    end
  end

  desc 'skb', 'download skb source and build it (https://github.com/polachok/skb)'
  def skb
    in_github_repo 'polachok/skb' do
      system 'make', 'skb'
      place_binary 'skb'
    end
  end

  desc 'dzen2', 'download dzen2 source and build it (https://github.com/robm/dzen)'
  def dzen2
    in_github_repo 'robm/dzen' do
      system 'make'
      place_binary 'dzen2'
    end
  end

  desc 'hsmarkdown', 'make symlink pandoc -> hsmarkdown'
  def hsmarkdown
    symlink_executable 'pandoc', 'hsmarkdown'
  end

  desc 'unrar_free', 'make symlink unrar-gpl -> unrar-free'
  def unrar_free
    symlink_executable 'unrar-gpl', 'unrar-free'
  end

  desc 'exercism', 'download exercism executable (http://exercism.io)'
  def exercism
    download_file EXERCISM_URI, 'exercism.tgz' do |archive|
      system 'tar', '--extract', '--gzip', '--file', archive, '--directory', BIN_DIR
    end
  end

  desc 'rockbox', 'download and install Rockbox Utility (http://www.rockbox.org/wiki/RockboxUtility)'
  def rockbox
    download_file ROCKBOX_UTILITY_URI, 'rockbox.tar.bz2' do |archive|
      FileUtils.rm_f location_of('RockboxUtility')
      system 'tar', '--extract', '--bzip2', '--file', archive
      place_binary Dir['*/RockboxUtility'].first
    end
  end

  desc 'camlistore', 'download and install camlistore (http://camlistore.org)'
  def camlistore
    in_git_repo CAMLISTORE_REPO_URI do
      system 'go', 'run', 'make.go'

      Dir['bin/*']
        .select(&method(:executable?))
        .each(&method(:place_binary))
    end
  end

  desc 'gcloud', 'download and install Google Cloud SDK (https://developers.google.com/cloud/sdk)'
  def gcloud
    ensure_directory_exists LIB_DIR

    FileUtils.rm_rf File.expand_path('google-cloud-sdk', LIB_DIR)

    download_file GOOGLE_CLOUD_SDK_URI, 'google-cloud-sdk.zip' do |archive|
      system 'unzip', archive, '-d', LIB_DIR
    end

    install_cmd = [].tap do |cmd|
      cmd << File.expand_path('google-cloud-sdk/install.sh', LIB_DIR)
      cmd << '--usage-reporting' << 'true'
      cmd << '--rc-path' << '/dev/null'
      cmd << '--bash-completion' << 'false'
      cmd << '--path-update' << 'false'
      cmd << '--disable-installation-options'
    end

    system(*install_cmd)
  end

  desc 'heroku', 'download and install Heroku client (https://github.com/heroku/heroku)'
  def heroku
    ensure_directory_exists LIB_DIR

    FileUtils.rm_rf File.expand_path('heroku-client', LIB_DIR)

    download_file HEROKU_CLIENT_URI, 'heroku-client.tgz' do |archive|
      system 'tar', '--extract', '--gzip', '--file', archive, '--directory', LIB_DIR
    end
  end

  desc 'zsh_completions', 'clone zsh-completions repository'
  def zsh_completions
    ensure_directory_exists LIB_DIR

    dir = File.expand_path('zsh-completions', LIB_DIR)

    if File.directory?(dir)
      Dir.chdir dir do
        system 'git', 'pull'
      end
    else
      system 'git', 'clone', ZSH_COMPLETIONS_URI, dir
    end
  end

  no_commands do
    include Helpers
  end
end

Bin.start ARGV
