#! /usr/bin/env ruby

require 'forwardable'
require 'pathname'
require 'thor'

DOT_ROOT = Pathname.new(ENV.fetch('DOTFILES_DIR', File.expand_path('~/.dotfiles')))
HOME = Pathname.new(Dir.home)

module Helpers
  # Delete start, then its parent, and so on.
  # Stop on first non-empty directory.
  def delete_empty_directories(start)
    start.ascend do |dir|
      begin
        dir.delete
      rescue SystemCallError
        break                           # not empty
      end
    end
  end
end

class Dotfile
  Status = Struct.new(:name, :message, :color)

  include Helpers
  extend Forwardable

  def_delegators :@path, :exist?, :file?, :relative_path_from, :to_s, :rename, :dirname

  def initialize(path)
    @path = Pathname(path)
  end

  def self.from_symlink(symlink)
    symlink = Pathname(File.expand_path(symlink))
    new(DOT_ROOT + symlink.relative_path_from(HOME))
  end

  def status
    @status ||= Status.new.tap do |s|
      s.message = symlink.to_s.sub(HOME.to_s, '~')
      s.name, s.color = case
                        when symlinked_correctly? then [:linked, :green]
                        when symlink_missing?     then [:missing, :yellow]
                        when symlink_overwritten? then [:overwritten, :red]
                        end
    end
  end

  def make_symlink
    symlink.delete unless symlink_missing?

    symlink.dirname.tap do |dir|
      dir.mkpath unless dir.exist?
    end

    symlink.make_symlink @path
  end

  def create
    fail if exist? || symlink.symlink?

    dirname.mkpath unless dirname.exist?
    symlink.rename @path
    make_symlink
  end

  def remove
    fail unless symlinked_correctly?

    symlink.delete unless symlink_missing?

    symlink.dirname.tap do |dir|
      dir.mkpath unless dir.exist?
    end

    rename symlink

    delete_empty_directories(dirname)
  end

  def symlinked_correctly?
    exist? && file? && symlink_valid?
  end

  def symlink
    HOME + @path.relative_path_from(DOT_ROOT)
  end

  def symlink_missing?
    !(symlink.exist? || symlink.symlink?)
  end

  def symlink_overwritten?
    symlink.exist? && !(symlink.symlink? && symlink.readlink == @path)
  end

  def symlink_valid?
    symlink.exist? && symlink.symlink? && symlink.readlink == @path
  end
end

class Dotfiles < Thor
  desc 'link_all', 'Link all dotfiles to home directory'
  def link_all
    dotfiles.reject(&:symlinked_correctly?).each(&:make_symlink)
  end

  desc 'list', 'List managed files'
  def list
    dotfiles.map(&:status).each do |status|
      say_status status.name, status.message, status.color
    end
  end

  desc 'manage FILE...', 'Add files to repository'
  def manage(*files)
    files
      .map(&Dotfile.method(:from_symlink))
      .each(&:create)
  end

  desc 'unmanage FILE...', 'Remove files from repository'
  def unmanage(*files)
    files
      .map(&Dotfile.method(:from_symlink))
      .each(&:remove)
  end

  no_commands do
    def all_files
      Pathname.glob(DOT_ROOT + '**/*', File::FNM_DOTMATCH).select(&:file?)
    end

    def excluded_files
      Pathname.glob(DOT_ROOT + '.git/**/*',  File::FNM_DOTMATCH).select(&:file?)
    end

    def dotfiles
      (all_files - excluded_files).map(&Dotfile.method(:new))
    end
  end
end

Dotfiles.start ARGV
